{"version":3,"sources":["js/03-promises.js"],"names":["refs","form","document","querySelector","delay","step","amount","submit","addEventListener","onFormInput","e","preventDefault","inputFormValue","position","createPromise","then","value","console","log","catch","error","target","nodeName","name","Number","shouldResolve","Math","random","settingsObject","createObj","Promise","resolve","reject","setTimeout"],"mappings":";AAAAA,KAAO,CACLC,KAAMC,SAASC,cAAc,QAC7BC,MAAOF,SAASC,cAAc,kBAC9BE,KAAMH,SAASC,cAAc,iBAC7BG,OAAQJ,SAASC,cAAc,mBAC/BI,OAAQL,SAASC,cAAc,0BAGjCH,KAAKC,KAAKO,iBAAiB,QAASC,GACpCT,KAAKC,KAAKO,iBAAiB,SAAUE,IACnCA,EAAEC,iBACEP,IAAAA,EAAQQ,EAAeR,MACvBC,EAAOO,EAAeP,KAErB,IAAA,IAAIQ,EAAW,EAAGA,GAAYD,EAAeN,OAAQO,GAAY,EACpEC,EAAcD,EAAUT,GACrBW,KAAKC,IACJC,QAAQC,IAAIF,KAEbG,MAAMC,IACLH,QAAQC,IAAIE,KAEhBhB,GAASC,IAIb,IAAIO,EAAiB,GAErB,SAASH,EAAYC,GACnBA,EAAEC,iBACwB,UAAtBD,EAAEW,OAAOC,WAGbV,EAAeF,EAAEW,OAAOE,MAAQC,OAAOd,EAAEW,OAAOL,QAGlD,SAASF,EAAcD,EAAUT,GAEzBqB,MAAAA,EAAgBC,KAAKC,SAAW,GAEhCC,EAAiBC,EAAUhB,EAAUT,GAEpC,OAAA,IAAI0B,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KACLR,EACFM,yBAA+BH,EAAef,eAAee,EAAexB,WAE5E4B,wBAA6BJ,EAAef,eAAee,EAAexB,YAE3EA,KAGP,SAASyB,EAAUhB,EAAUT,GAEpB,MAAA,CAAES,SAAAA,EAAUT,MAAAA","file":"03-promises.89a70101.js","sourceRoot":"../src","sourcesContent":["refs = {\n  form: document.querySelector('form'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n  submit: document.querySelector('button[type=\"submit\"]'),\n};\n\nrefs.form.addEventListener('input', onFormInput);\nrefs.form.addEventListener('submit', e => {\n  e.preventDefault();\n  let delay = inputFormValue.delay;\n  let step = inputFormValue.step;\n\n  for (let position = 1; position <= inputFormValue.amount; position += 1) {\n    createPromise(position, delay)\n      .then(value => {\n        console.log(value);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n    delay += step;\n  }\n});\n\nlet inputFormValue = {};\n\nfunction onFormInput(e) {\n  e.preventDefault();\n  if (e.target.nodeName !== 'INPUT') {\n    return;\n  }\n  inputFormValue[e.target.name] = Number(e.target.value);\n}\n\nfunction createPromise(position, delay) {\n  // console.log('position', position, 'delay', delay);\n  const shouldResolve = Math.random() > 0.3;\n\n  const settingsObject = createObj(position, delay);\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${settingsObject.position} in ${settingsObject.delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${settingsObject.position} in ${settingsObject.delay}ms`);\n      }\n    }, delay);\n  });\n}\nfunction createObj(position, delay) {\n  // console.log({ position, delay });\n  return { position, delay };\n}\n"]}